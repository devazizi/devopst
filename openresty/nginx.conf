
worker_processes 32;
pcre_jit on;
include /etc/nginx/modules-enabled/*.conf;
events {
    worker_connections  1024;
}

http {
    sendfile on;
    tcp_nodelay on;
    server_tokens off;
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/nginx-lua-prometheus/?.lua;;";
    include /etc/nginx/conf.d/*.conf;
    error_log stderr;

    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics", {sync_interval=0.1})

        metric_requests_by_path = prometheus:counter("ngx_requests_by_path_total",
          "Number of HTTP requests", {"host", "path", "status"})
        metric_requests = prometheus:counter("ngx_requests_total",
          "Number of HTTP requests", {"host"})
        metric_latency = prometheus:histogram("ngx_request_duration_seconds",
          "HTTP request latency", {"host"},
          {0.01, 0.02, 0.04, 0.08, 0.089991, 0.1, 0.2, 0.75, 1, 1.5, 3.123232001, 5, 15, 120, 350.5, 1500, 75000, 1500000})
        metric_connections = prometheus:gauge("ngx_connections",
          "Number of HTTP connections", {"state"})
        metric_request_size = prometheus:histogram("ngx_request_size_bytes", "Size of HTTP requests", {"host"},
          {0, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000})
        metric_response_size = prometheus:histogram("ngx_response_size_bytes", "Size of HTTP responses", {"host"},
          {0, 500, 1000, 5000, 10000, 20000, 50000, 100000, 200000})
        metric_upstream_latency = prometheus:histogram("ngx_upstream_latency_seconds", "Upstream response time", {"host"},
          {0.01, 0.05, 0.1, 0.2, 0.5, 1, 2, 5})
        metric_request_methods = prometheus:counter("ngx_requests_method_total", "Number of HTTP requests by method", {"method", "host"})
        metric_status_codes = prometheus:counter("ngx_http_requests_status_total", "Number HTTP requests status codes", {"status", "host"})
        metric_active_connections = prometheus:gauge("active_connections", "Number of active connections")
    }


    log_by_lua_block {
            metric_requests:inc(1, {ngx.var.server_name})
            metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
            metric_request_methods:inc(1, {ngx.var.request_method, ngx.var.server_name})
            metric_status_codes:inc(1, {ngx.var.status, ngx.var.server_name})
    }

    server {
        listen 80 default_server;
        server_name _;

        location / {
            return 404;
        }


        location /health {
            content_by_lua_block {
                ngx.say("Healthy")
            }
        }

        location /metrics {
            content_by_lua_block {
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
            }
        }
    }
}

include /etc/nginx/conf.d/*.main;